//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Projektaufgabe.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Projektaufgabe_WCF")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isAdminField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isAdmin {
            get {
                return this.isAdminField;
            }
            set {
                if ((this.isAdminField.Equals(value) != true)) {
                    this.isAdminField = value;
                    this.RaisePropertyChanged("isAdmin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessUnit", Namespace="http://schemas.datacontract.org/2004/07/Projektaufgabe_WCF")]
    [System.SerializableAttribute()]
    public partial class BusinessUnit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/Projektaufgabe_WCF")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BusinessUnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BusinessUnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SalutationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BusinessUnit {
            get {
                return this.BusinessUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessUnitField, value) != true)) {
                    this.BusinessUnitField = value;
                    this.RaisePropertyChanged("BusinessUnit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BusinessUnitId {
            get {
                return this.BusinessUnitIdField;
            }
            set {
                if ((this.BusinessUnitIdField.Equals(value) != true)) {
                    this.BusinessUnitIdField = value;
                    this.RaisePropertyChanged("BusinessUnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeNumber {
            get {
                return this.EmployeeNumberField;
            }
            set {
                if ((this.EmployeeNumberField.Equals(value) != true)) {
                    this.EmployeeNumberField = value;
                    this.RaisePropertyChanged("EmployeeNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fullname {
            get {
                return this.FullnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullnameField, value) != true)) {
                    this.FullnameField = value;
                    this.RaisePropertyChanged("Fullname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salutation {
            get {
                return this.SalutationField;
            }
            set {
                if ((object.ReferenceEquals(this.SalutationField, value) != true)) {
                    this.SalutationField = value;
                    this.RaisePropertyChanged("Salutation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehicle", Namespace="http://schemas.datacontract.org/2004/07/Projektaufgabe_WCF")]
    [System.SerializableAttribute()]
    public partial class Vehicle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal InsuranceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LeasingFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LeasingRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LeasingToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicensePlateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Insurance {
            get {
                return this.InsuranceField;
            }
            set {
                if ((this.InsuranceField.Equals(value) != true)) {
                    this.InsuranceField = value;
                    this.RaisePropertyChanged("Insurance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LeasingFrom {
            get {
                return this.LeasingFromField;
            }
            set {
                if ((this.LeasingFromField.Equals(value) != true)) {
                    this.LeasingFromField = value;
                    this.RaisePropertyChanged("LeasingFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LeasingRate {
            get {
                return this.LeasingRateField;
            }
            set {
                if ((this.LeasingRateField.Equals(value) != true)) {
                    this.LeasingRateField = value;
                    this.RaisePropertyChanged("LeasingRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LeasingTo {
            get {
                return this.LeasingToField;
            }
            set {
                if ((this.LeasingToField.Equals(value) != true)) {
                    this.LeasingToField = value;
                    this.RaisePropertyChanged("LeasingTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicensePlate {
            get {
                return this.LicensePlateField;
            }
            set {
                if ((object.ReferenceEquals(this.LicensePlateField, value) != true)) {
                    this.LicensePlateField = value;
                    this.RaisePropertyChanged("LicensePlate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleToEmployeeRelation", Namespace="http://schemas.datacontract.org/2004/07/Projektaufgabe_WCF")]
    [System.SerializableAttribute()]
    public partial class VehicleToEmployeeRelation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VehicleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeId {
            get {
                return this.EmployeeIdField;
            }
            set {
                if ((this.EmployeeIdField.Equals(value) != true)) {
                    this.EmployeeIdField = value;
                    this.RaisePropertyChanged("EmployeeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fullname {
            get {
                return this.FullnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullnameField, value) != true)) {
                    this.FullnameField = value;
                    this.RaisePropertyChanged("Fullname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VehicleId {
            get {
                return this.VehicleIdField;
            }
            set {
                if ((this.VehicleIdField.Equals(value) != true)) {
                    this.VehicleIdField = value;
                    this.RaisePropertyChanged("VehicleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonthlyCost", Namespace="http://schemas.datacontract.org/2004/07/Projektaufgabe_WCF")]
    [System.SerializableAttribute()]
    public partial class MonthlyCost : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MonthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Month {
            get {
                return this.MonthField;
            }
            set {
                if ((this.MonthField.Equals(value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoginUser", ReplyAction="http://tempuri.org/IService/LoginUserResponse")]
        Projektaufgabe.ServiceReference1.User LoginUser(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoginUser", ReplyAction="http://tempuri.org/IService/LoginUserResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.User> LoginUserAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsers", ReplyAction="http://tempuri.org/IService/GetUsersResponse")]
        Projektaufgabe.ServiceReference1.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsers", ReplyAction="http://tempuri.org/IService/GetUsersResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBusinessUnits", ReplyAction="http://tempuri.org/IService/GetBusinessUnitsResponse")]
        Projektaufgabe.ServiceReference1.BusinessUnit[] GetBusinessUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBusinessUnits", ReplyAction="http://tempuri.org/IService/GetBusinessUnitsResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.BusinessUnit[]> GetBusinessUnitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEmployees", ReplyAction="http://tempuri.org/IService/GetEmployeesResponse")]
        Projektaufgabe.ServiceReference1.Employee[] GetEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEmployees", ReplyAction="http://tempuri.org/IService/GetEmployeesResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Employee[]> GetEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVehicles", ReplyAction="http://tempuri.org/IService/GetVehiclesResponse")]
        Projektaufgabe.ServiceReference1.Vehicle[] GetVehicles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVehicles", ReplyAction="http://tempuri.org/IService/GetVehiclesResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Vehicle[]> GetVehiclesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEmployeesForVehicleTab", ReplyAction="http://tempuri.org/IService/GetEmployeesForVehicleTabResponse")]
        Projektaufgabe.ServiceReference1.VehicleToEmployeeRelation[] GetEmployeesForVehicleTab(string licensePlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEmployeesForVehicleTab", ReplyAction="http://tempuri.org/IService/GetEmployeesForVehicleTabResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.VehicleToEmployeeRelation[]> GetEmployeesForVehicleTabAsync(string licensePlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEmployeesForNewVehicleRelation", ReplyAction="http://tempuri.org/IService/GetEmployeesForNewVehicleRelationResponse")]
        Projektaufgabe.ServiceReference1.Employee[] GetEmployeesForNewVehicleRelation(string licensePlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEmployeesForNewVehicleRelation", ReplyAction="http://tempuri.org/IService/GetEmployeesForNewVehicleRelationResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Employee[]> GetEmployeesForNewVehicleRelationAsync(string licensePlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMonthlyCosts", ReplyAction="http://tempuri.org/IService/GetMonthlyCostsResponse")]
        Projektaufgabe.ServiceReference1.MonthlyCost[] GetMonthlyCosts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMonthlyCosts", ReplyAction="http://tempuri.org/IService/GetMonthlyCostsResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.MonthlyCost[]> GetMonthlyCostsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangePassword", ReplyAction="http://tempuri.org/IService/ChangePasswordResponse")]
        bool ChangePassword(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangePassword", ReplyAction="http://tempuri.org/IService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string username, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewUser", ReplyAction="http://tempuri.org/IService/NewUserResponse")]
        Projektaufgabe.ServiceReference1.User NewUser(string username, string firstname, string lastname, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewUser", ReplyAction="http://tempuri.org/IService/NewUserResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.User> NewUserAsync(string username, string firstname, string lastname, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        bool DeleteUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        bool UpdateUser(string username, string newUsername, string firstname, string lastname, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(string username, string newUsername, string firstname, string lastname, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewBusinessUnit", ReplyAction="http://tempuri.org/IService/NewBusinessUnitResponse")]
        Projektaufgabe.ServiceReference1.BusinessUnit NewBusinessUnit(string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewBusinessUnit", ReplyAction="http://tempuri.org/IService/NewBusinessUnitResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.BusinessUnit> NewBusinessUnitAsync(string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBusinessUnit", ReplyAction="http://tempuri.org/IService/DeleteBusinessUnitResponse")]
        bool DeleteBusinessUnit(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBusinessUnit", ReplyAction="http://tempuri.org/IService/DeleteBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> DeleteBusinessUnitAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBusinessUnit", ReplyAction="http://tempuri.org/IService/UpdateBusinessUnitResponse")]
        bool UpdateBusinessUnit(string name, string newName, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBusinessUnit", ReplyAction="http://tempuri.org/IService/UpdateBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> UpdateBusinessUnitAsync(string name, string newName, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewEmployee", ReplyAction="http://tempuri.org/IService/NewEmployeeResponse")]
        Projektaufgabe.ServiceReference1.Employee NewEmployee(string firstname, string lastname, int employeeNumber, string salutation, string title, int businessUnitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewEmployee", ReplyAction="http://tempuri.org/IService/NewEmployeeResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Employee> NewEmployeeAsync(string firstname, string lastname, int employeeNumber, string salutation, string title, int businessUnitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteEmployee", ReplyAction="http://tempuri.org/IService/DeleteEmployeeResponse")]
        bool DeleteEmployee(int employeeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteEmployee", ReplyAction="http://tempuri.org/IService/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int employeeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateEmployee", ReplyAction="http://tempuri.org/IService/UpdateEmployeeResponse")]
        bool UpdateEmployee(string firstname, string lastname, int employeeNumber, int newEmployeeNumber, string salutation, string title, int businessUnitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateEmployee", ReplyAction="http://tempuri.org/IService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(string firstname, string lastname, int employeeNumber, int newEmployeeNumber, string salutation, string title, int businessUnitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewVehicle", ReplyAction="http://tempuri.org/IService/NewVehicleResponse")]
        Projektaufgabe.ServiceReference1.Vehicle NewVehicle(string licensePlate, string brand, string model, decimal insurance, System.DateTime leasingFrom, System.DateTime leasingTo, decimal leasingRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewVehicle", ReplyAction="http://tempuri.org/IService/NewVehicleResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Vehicle> NewVehicleAsync(string licensePlate, string brand, string model, decimal insurance, System.DateTime leasingFrom, System.DateTime leasingTo, decimal leasingRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteVehicle", ReplyAction="http://tempuri.org/IService/DeleteVehicleResponse")]
        bool DeleteVehicle(string licensePlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteVehicle", ReplyAction="http://tempuri.org/IService/DeleteVehicleResponse")]
        System.Threading.Tasks.Task<bool> DeleteVehicleAsync(string licensePlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateVehicle", ReplyAction="http://tempuri.org/IService/UpdateVehicleResponse")]
        bool UpdateVehicle(string licensePlate, string newLicensePlate, string brand, string model, decimal insurance, System.DateTime leasingFrom, System.DateTime leasingTo, decimal leasingRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateVehicle", ReplyAction="http://tempuri.org/IService/UpdateVehicleResponse")]
        System.Threading.Tasks.Task<bool> UpdateVehicleAsync(string licensePlate, string newLicensePlate, string brand, string model, decimal insurance, System.DateTime leasingFrom, System.DateTime leasingTo, decimal leasingRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewVehicle2EmployeeRelation", ReplyAction="http://tempuri.org/IService/NewVehicle2EmployeeRelationResponse")]
        Projektaufgabe.ServiceReference1.VehicleToEmployeeRelation NewVehicle2EmployeeRelation(System.DateTime startDate, System.DateTime endDate, string licensePlate, int employeeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewVehicle2EmployeeRelation", ReplyAction="http://tempuri.org/IService/NewVehicle2EmployeeRelationResponse")]
        System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.VehicleToEmployeeRelation> NewVehicle2EmployeeRelationAsync(System.DateTime startDate, System.DateTime endDate, string licensePlate, int employeeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteVehicle2EmployeeRelation", ReplyAction="http://tempuri.org/IService/DeleteVehicle2EmployeeRelationResponse")]
        bool DeleteVehicle2EmployeeRelation(string licensePlate, int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteVehicle2EmployeeRelation", ReplyAction="http://tempuri.org/IService/DeleteVehicle2EmployeeRelationResponse")]
        System.Threading.Tasks.Task<bool> DeleteVehicle2EmployeeRelationAsync(string licensePlate, int employeeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Projektaufgabe.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Projektaufgabe.ServiceReference1.IService>, Projektaufgabe.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Projektaufgabe.ServiceReference1.User LoginUser(string Username, string Password) {
            return base.Channel.LoginUser(Username, Password);
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.User> LoginUserAsync(string Username, string Password) {
            return base.Channel.LoginUserAsync(Username, Password);
        }
        
        public Projektaufgabe.ServiceReference1.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public Projektaufgabe.ServiceReference1.BusinessUnit[] GetBusinessUnits() {
            return base.Channel.GetBusinessUnits();
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.BusinessUnit[]> GetBusinessUnitsAsync() {
            return base.Channel.GetBusinessUnitsAsync();
        }
        
        public Projektaufgabe.ServiceReference1.Employee[] GetEmployees() {
            return base.Channel.GetEmployees();
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Employee[]> GetEmployeesAsync() {
            return base.Channel.GetEmployeesAsync();
        }
        
        public Projektaufgabe.ServiceReference1.Vehicle[] GetVehicles() {
            return base.Channel.GetVehicles();
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Vehicle[]> GetVehiclesAsync() {
            return base.Channel.GetVehiclesAsync();
        }
        
        public Projektaufgabe.ServiceReference1.VehicleToEmployeeRelation[] GetEmployeesForVehicleTab(string licensePlate) {
            return base.Channel.GetEmployeesForVehicleTab(licensePlate);
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.VehicleToEmployeeRelation[]> GetEmployeesForVehicleTabAsync(string licensePlate) {
            return base.Channel.GetEmployeesForVehicleTabAsync(licensePlate);
        }
        
        public Projektaufgabe.ServiceReference1.Employee[] GetEmployeesForNewVehicleRelation(string licensePlate) {
            return base.Channel.GetEmployeesForNewVehicleRelation(licensePlate);
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Employee[]> GetEmployeesForNewVehicleRelationAsync(string licensePlate) {
            return base.Channel.GetEmployeesForNewVehicleRelationAsync(licensePlate);
        }
        
        public Projektaufgabe.ServiceReference1.MonthlyCost[] GetMonthlyCosts() {
            return base.Channel.GetMonthlyCosts();
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.MonthlyCost[]> GetMonthlyCostsAsync() {
            return base.Channel.GetMonthlyCostsAsync();
        }
        
        public bool ChangePassword(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(username, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string username, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(username, oldPassword, newPassword);
        }
        
        public Projektaufgabe.ServiceReference1.User NewUser(string username, string firstname, string lastname, bool isAdmin) {
            return base.Channel.NewUser(username, firstname, lastname, isAdmin);
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.User> NewUserAsync(string username, string firstname, string lastname, bool isAdmin) {
            return base.Channel.NewUserAsync(username, firstname, lastname, isAdmin);
        }
        
        public bool DeleteUser(string username) {
            return base.Channel.DeleteUser(username);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string username) {
            return base.Channel.DeleteUserAsync(username);
        }
        
        public bool UpdateUser(string username, string newUsername, string firstname, string lastname, bool isAdmin) {
            return base.Channel.UpdateUser(username, newUsername, firstname, lastname, isAdmin);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(string username, string newUsername, string firstname, string lastname, bool isAdmin) {
            return base.Channel.UpdateUserAsync(username, newUsername, firstname, lastname, isAdmin);
        }
        
        public Projektaufgabe.ServiceReference1.BusinessUnit NewBusinessUnit(string name, string description) {
            return base.Channel.NewBusinessUnit(name, description);
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.BusinessUnit> NewBusinessUnitAsync(string name, string description) {
            return base.Channel.NewBusinessUnitAsync(name, description);
        }
        
        public bool DeleteBusinessUnit(string name) {
            return base.Channel.DeleteBusinessUnit(name);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBusinessUnitAsync(string name) {
            return base.Channel.DeleteBusinessUnitAsync(name);
        }
        
        public bool UpdateBusinessUnit(string name, string newName, string description) {
            return base.Channel.UpdateBusinessUnit(name, newName, description);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBusinessUnitAsync(string name, string newName, string description) {
            return base.Channel.UpdateBusinessUnitAsync(name, newName, description);
        }
        
        public Projektaufgabe.ServiceReference1.Employee NewEmployee(string firstname, string lastname, int employeeNumber, string salutation, string title, int businessUnitId) {
            return base.Channel.NewEmployee(firstname, lastname, employeeNumber, salutation, title, businessUnitId);
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Employee> NewEmployeeAsync(string firstname, string lastname, int employeeNumber, string salutation, string title, int businessUnitId) {
            return base.Channel.NewEmployeeAsync(firstname, lastname, employeeNumber, salutation, title, businessUnitId);
        }
        
        public bool DeleteEmployee(int employeeNumber) {
            return base.Channel.DeleteEmployee(employeeNumber);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int employeeNumber) {
            return base.Channel.DeleteEmployeeAsync(employeeNumber);
        }
        
        public bool UpdateEmployee(string firstname, string lastname, int employeeNumber, int newEmployeeNumber, string salutation, string title, int businessUnitId) {
            return base.Channel.UpdateEmployee(firstname, lastname, employeeNumber, newEmployeeNumber, salutation, title, businessUnitId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(string firstname, string lastname, int employeeNumber, int newEmployeeNumber, string salutation, string title, int businessUnitId) {
            return base.Channel.UpdateEmployeeAsync(firstname, lastname, employeeNumber, newEmployeeNumber, salutation, title, businessUnitId);
        }
        
        public Projektaufgabe.ServiceReference1.Vehicle NewVehicle(string licensePlate, string brand, string model, decimal insurance, System.DateTime leasingFrom, System.DateTime leasingTo, decimal leasingRate) {
            return base.Channel.NewVehicle(licensePlate, brand, model, insurance, leasingFrom, leasingTo, leasingRate);
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.Vehicle> NewVehicleAsync(string licensePlate, string brand, string model, decimal insurance, System.DateTime leasingFrom, System.DateTime leasingTo, decimal leasingRate) {
            return base.Channel.NewVehicleAsync(licensePlate, brand, model, insurance, leasingFrom, leasingTo, leasingRate);
        }
        
        public bool DeleteVehicle(string licensePlate) {
            return base.Channel.DeleteVehicle(licensePlate);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVehicleAsync(string licensePlate) {
            return base.Channel.DeleteVehicleAsync(licensePlate);
        }
        
        public bool UpdateVehicle(string licensePlate, string newLicensePlate, string brand, string model, decimal insurance, System.DateTime leasingFrom, System.DateTime leasingTo, decimal leasingRate) {
            return base.Channel.UpdateVehicle(licensePlate, newLicensePlate, brand, model, insurance, leasingFrom, leasingTo, leasingRate);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateVehicleAsync(string licensePlate, string newLicensePlate, string brand, string model, decimal insurance, System.DateTime leasingFrom, System.DateTime leasingTo, decimal leasingRate) {
            return base.Channel.UpdateVehicleAsync(licensePlate, newLicensePlate, brand, model, insurance, leasingFrom, leasingTo, leasingRate);
        }
        
        public Projektaufgabe.ServiceReference1.VehicleToEmployeeRelation NewVehicle2EmployeeRelation(System.DateTime startDate, System.DateTime endDate, string licensePlate, int employeeNumber) {
            return base.Channel.NewVehicle2EmployeeRelation(startDate, endDate, licensePlate, employeeNumber);
        }
        
        public System.Threading.Tasks.Task<Projektaufgabe.ServiceReference1.VehicleToEmployeeRelation> NewVehicle2EmployeeRelationAsync(System.DateTime startDate, System.DateTime endDate, string licensePlate, int employeeNumber) {
            return base.Channel.NewVehicle2EmployeeRelationAsync(startDate, endDate, licensePlate, employeeNumber);
        }
        
        public bool DeleteVehicle2EmployeeRelation(string licensePlate, int employeeId) {
            return base.Channel.DeleteVehicle2EmployeeRelation(licensePlate, employeeId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVehicle2EmployeeRelationAsync(string licensePlate, int employeeId) {
            return base.Channel.DeleteVehicle2EmployeeRelationAsync(licensePlate, employeeId);
        }
    }
}
